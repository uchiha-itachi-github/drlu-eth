{"version":3,"file":"static/js/18.chunk.js","sources":["/Users/linyitang/github/newWallet2/src/contract/index.js","/Users/linyitang/github/newWallet2/src/page/dapp/electronicDocument/fileReader.jsx","/Users/linyitang/github/newWallet2/src/page/dapp/electronicDocument/sign.jsx"],"sourcesContent":["import * as ethers from 'ethers/index.js';\nimport Config from './config.json'\nimport { reject } from 'q';\n\n\nfunction toHumanReadable(abi) {\n    if (!Array.isArray(abi)) { return }\n    abi = abi.filter(v => v.type !== 'fallback')\n    const hrabi = abi.map(v => {\n        const type = v.type\n        const name = v.name ? ' ' + v.name : ''\n        const inputs = v.inputs ? v.inputs.map(i => i.type + (i.indexed ? ' indexed' : '') + (i.name ? ' ' + i.name : '')).join() : ''\n        const stateMutability = v.stateMutability ? (v.stateMutability !== \"nonpayable\" ? ' ' + v.stateMutability : '') : ''\n        const returns = v.outputs ? (v.outputs.length >= 0 ? ` returns (${v.outputs.map((i) => i.type + (i.name ? ' ' + i.name : '') ).join()})` : '') : ''\n        return `${type}${name}(${inputs})${stateMutability}${returns}`;\n    })\n    return JSON.stringify(hrabi, null, 2);\n}\nfunction toAbi(hrabi) {\n    if (!Array.isArray(hrabi)) { return }\n    let abi = new ethers.utils.Interface(hrabi).abi.map(abi => {\n        abi = JSON.parse(JSON.stringify(abi));\n        delete abi.gas;\n        if (abi.stateMutability === null) {\n            delete abi.stateMutability\n        }\n        return abi\n    })\n    return JSON.stringify(abi, null, 2);\n}\n\nasync function deployErc20Token(name, symbol, decimals, wallet) {\n    let erc20 = new ethers.ContractFactory(Config.erc20.abi, Config.erc20.bytecode);\n    erc20 = erc20.connect(wallet);\n    let contract = await erc20.deploy(name, symbol, decimals);\n    return contract\n}\n\nasync function deployMutiWalletToken(_owners, _required, _daylimit, wallet) {\n    let mutiWallet = new ethers.ContractFactory(Config.mutiWallet.abi, Config.mutiWallet.bytecode);\n    mutiWallet = mutiWallet.connect(wallet);\n    let contract = await mutiWallet.deploy(name, symbol, decimals);\n    return contract\n}\n\n\nfunction Event(contract, eventName, args = [], fromBlock = 0, toBlock = 'latest') {\n    args = Array.isArray(args) ? args : [args];\n    let event = contract.filters[eventName](...args);\n    let abi = contract.interface.abi.find((v) => v.name === eventName).inputs;\n\n    let filter = {\n        fromBlock,\n        toBlock,\n        ...event\n    }\n\n\n    return this.getLogs(filter).then(function (result) {\n        let coder = new ethers.utils.AbiCoder()\n\n        let abi1 = abi.filter((v) => v.indexed)\n        let abi2 = abi.filter((v) => !v.indexed)\n\n        let r = result.map(r => {\n            r.topics.shift()\n            let topics = r.topics.map((t, i) => {\n                return coder.decode([abi1[i]], t)[0]\n            })\n            let datas = coder.decode(abi2, r.data)\n            let _r = abi.map(v => v.indexed ? topics.shift() : datas.shift())\n            _r.transactionHash = r.transactionHash\n            _r.blockNumber = Number(r.blockNumber)\n            return _r\n        })\n\n        return r\n    })\n\n    return Promise.resolve(1)\n}\n\n\nexport default {\n    toAbi,\n    toHumanReadable,\n    deployErc20Token,\n    deployMutiWalletToken,\n    Event\n}\n\nexport {\n    toAbi,\n    toHumanReadable,\n    deployErc20Token,\n    deployMutiWalletToken,\n    Event\n};\n\n","import React, { Component } from 'react'\nimport Markdown from 'react-markdown'\nimport utils from 'ethereumjs-util';\n\nexport default class FileReader extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: '',\n            type: '',\n            hash: ''\n        }\n    }\n    getFile = (e) => {\n        let reader = new window.FileReader();\n        let target = e.target;\n        let file = target.files[0];\n\n        if (target.files.length === 0) {\n            return;\n        }\n\n        if (file.size / 1024 / 1024 < 50) {\n            reader.onprogress = ({ loaded, total }) => {\n                this.setState({ hash: Math.round((loaded / total) * 10000) / 100, data: '' })\n\n            }\n            reader.onload = (e) => {\n                let sha256 = '0x' + utils.sha256(reader.result).toString('hex');\n                this.setState({ hash: 'sha256: ' + sha256, data: reader.result, type: file.type })\n                this.props.onLoaded(sha256);\n            }\n        } else {\n            this.setState({ hash: 'file size too big', data: '' });\n        }\n        if (file.type.indexOf('text') >= 0) {\n            reader.readAsText(file);\n        } else {\n            reader.readAsDataURL(file)\n        }\n        this.setState({ type: '', data: '' })\n    }\n    render() {\n        let view\n        let type = this.state.type\n        if (type.indexOf('image') >= 0) {\n            view = <img style={{ maxWidth: \"100%\", maxHeight: \"600px\" }} src={this.state.data} />;\n        } else if (type.indexOf('audio') >= 0) {\n            view = (\n                <audio controls>\n                    <source src={this.state.data} type={type} />\n                    你的瀏覽器不支持  {type} 。\n                </audio>\n            );\n        } else if (type.indexOf('video') >= 0) {\n            view = (\n                <video controls>\n                    <source src={this.state.data} type={type} />\n                    你的瀏覽器不支持 {type} 。\n                </video>\n            )\n        } else if (type.indexOf('markdown') >= 0) {\n            view = <Markdown source={this.state.data} />\n        } else if (type.indexOf('text') >= 0) {\n            view = (<pre>{this.state.data}</pre>)\n        } else if (type !== '') {\n            view = (<pre>無法處理檔案</pre>)\n        }\n        return (\n            <div className=\"box box-primary\">\n                <div className=\"box-header with-border\">\n                    <h3 className=\"box-title\">內容顯示</h3>\n                </div>\n                <div className=\"box-body\">\n                    <div className=\"input-group\">\n                        <input type=\"text\" className=\"form-control\" placeholder=\"SHA256\" value={this.state.hash} readOnly />\n                        <label className=\"input-group-addon\">\n                            <i className=\"fa fa-folder-open-o\"></i>\n                            <input type=\"file\" style={{ \"display\": \"none\" }} onChange={(e) => { this.getFile(e) }} />\n                        </label>\n                    </div>\n                    {view}\n                </div>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport { FileReader }","import React, { Component } from 'react';\n\nimport QRCode from 'qrcode-react';\nimport { FileReader } from './fileReader';\nimport Config from '../../../contract/config.json';\nimport * as ethers from 'ethers/index.js';\nimport { Event } from '../../../contract/index'\n\nimport { observer, inject } from 'mobx-react'\n\n\n@inject('ethereumStore')\n@observer\nexport default class Sign extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            confirmText: 'Choose File',\n            name: '',\n            hash: '',\n            isExist: '',\n            hasConfirmed: true,\n            approvers: [],\n        }\n        this.provider = this.props.ethereumStore.provider;\n        this.contract = new ethers.Contract(Config.edoc[3].contractAddress, Config.edoc.abi, this.provider)\n\n    }\n    componentWillMount() {\n    }\n    componentWillReact() {\n        this.state.hash && this.getConfirmState();\n    }\n    getConfirmState = async () => {\n        let name = await this.contract.peopleName(this.props.ethereumStore.address);\n        let hasConfirmed = false\n        if ((await Event.bind(this.provider)(this.contract, 'Approver', [this.props.ethereumStore.address, this.state.hash])).length) {\n            hasConfirmed = true;\n        }\n        let confirmText = 'No Set Name'\n\n        console.log('test')\n        if (name) {\n            confirmText = 'Confirm';\n            if (hasConfirmed) {\n                confirmText = 'Confirmed';\n            }\n        }\n        this.setState({ name, hasConfirmed, confirmText, hash: this.state.hash })\n\n        setTimeout(async () => {\n            let r = await Event.bind(this.provider)(this.contract, 'DocumentApproved', [this.state.hash])\n            r = r.map(async v => {\n                let userAddress = v[1];\n                let name = await this.contract.peopleName(userAddress);\n                return { name, transactionHash: v.transactionHash, blockNumber: v.blockNumber }\n            })\n            Promise.all(r).then(r => {\n                this.setState({ approvers: r })\n            })\n        })\n    }\n    onLoaded = (hash) => {\n        this.state.hash = hash;\n        this.getConfirmState()\n    }\n    confirm = async () => {\n        let signer = this.contract.connect(this.props.ethereumStore.wallet.connect(this.provider));\n        let tx\n        if ((await Event.bind(this.provider)(this.contract, 'NewDocument', this.state.hash)).length) {\n            tx = await signer.documentApproved(this.state.hash)\n        } else {\n            console.log(signer)\n            tx = await signer.newDocument(this.state.hash, [])\n        }\n        alert('txid: ' + tx.hash)\n        setTimeout(async () => {\n            await tx.wait();\n            this.getConfirmState()\n        })\n    }\n\n    render() {\n        let approvers = this.state.approvers.map((v, i) => {\n            let link = `https://ropsten.etherscan.io/tx/${v.transactionHash}`\n            return (<tr key={v.transactionHash}>\n                <td>{i}</td>\n                <td>{v.name}</td>\n                <td><a href={link}><QRCode size={150} value={link} /></a></td>\n                <td>{v.blockNumber}</td>\n            </tr>)\n        })\n        return (\n            <form onSubmit={(e) => e.preventDefault()}>\n                <div style={{ display: \"none\" }}>{this.props.ethereumStore.address}</div>\n                <FileReader\n                    onLoaded={this.onLoaded}\n                >\n                    <div className=\"box-footer\">\n                        <button\n                            className=\"btn btn-primary\" disabled={this.state.hasConfirmed || !this.state.name}\n                            onClick={this.confirm}\n                        >\n                            <i className=\"fa fa-pencil\"></i>\n                            <span>\n                                {this.state.confirmText}\n                            </span>\n                        </button>\n                    </div>\n                </FileReader>\n\n                <div className=\"box box-primary\">\n                    <div className=\"box-header with-border\">\n                        <h3 className=\"box-title\">簽署者</h3>\n                    </div>\n                    <div className=\"box-body\">\n                        <table className=\"table table-striped\">\n                            <tbody><tr>\n                                <th style={{ \"width\": \"10px\" }}>#</th>\n                                <th>簽署者</th>\n                                <th>Txid</th>\n                                <th>Block</th>\n                            </tr>\n                                {approvers}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\nexport { Sign };"],"mappings":"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","sourceRoot":""}