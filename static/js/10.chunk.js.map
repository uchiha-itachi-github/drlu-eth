{"version":3,"file":"static/js/10.chunk.js","sources":["/Users/linyitang/github/newWallet2/src/component/qrcode/index.jsx","/Users/linyitang/github/newWallet2/src/lib/bitcoin.js","/Users/linyitang/github/newWallet2/src/lib/website.js","/Users/linyitang/github/newWallet2/src/page/bitcoin/general/transfer.jsx","/Users/linyitang/github/newWallet2/ignored /Users/linyitang/github/newWallet2/node_modules/tweetnacl crypto"],"sourcesContent":["import qrcode from './qrcode';\nimport QRcodeInput from './qrcodeInput';\n// import QRcodeView from './qrcodeView';\nexport default {\n    qrcode,\n    QRcodeInput,\n    // QRcodeView\n}\nexport {\n    qrcode,\n    QRcodeInput,\n    // QRcodeView\n}","import bitcoinlib from 'bitcoinjs-lib';\nimport { website } from './website';\nimport { pushtx } from 'blockchain.info';\n\nlet legacyAddress = (r,byte) => {\n    r.unshift(byte || window.coinjs.pub);\n    var hash = Crypto.SHA256(Crypto.SHA256(r, {asBytes: true}), {asBytes: true});\n    var checksum = hash.slice(0, 4);\n    return window.coinjs.base58encode(r.concat(checksum));\n}\n\nlet bech32Address = (pubkey) => {\n    var program = window.ripemd160(Crypto.SHA256(Crypto.util.hexToBytes(pubkey), {asBytes: true}), {asBytes: true});\n    var address = window.coinjs.bech32_encode(window.coinjs.bech32.hrp, [window.coinjs.bech32.version].concat(window.coinjs.bech32_convert(program, 8, 5, true))); \n    return {'address':address, 'type':'bech32', 'redeemscript':Crypto.util.bytesToHex(program)};\n}\n\nlet segwitAddress = (pubkey) => {\n    var keyhash = [0x00,0x14].concat(window.ripemd160(Crypto.SHA256(Crypto.util.hexToBytes(pubkey), {asBytes: true}), {asBytes: true}));\n    var x = window.ripemd160(Crypto.SHA256(keyhash, {asBytes: true}), {asBytes: true});\n    x.unshift(window.coinjs.multisig);\n    var r = x;\n    r = Crypto.SHA256(Crypto.SHA256(r, {asBytes: true}), {asBytes: true});\n    var checksum = r.slice(0,4);\n    var address = window.coinjs.base58encode(x.concat(checksum));\n\n    return {'address':address, 'type':'segwit', 'redeemscript':Crypto.util.bytesToHex(keyhash)};\n}\n\n// let transaction = ({privatekeyHex, network=bitcoinlib.networks.bitcoin, to , fees = 200000}, callback) => {\n//     const keyPair = bitcoinlib.ECPair.fromPrivateKey(Buffer.from(privatekeyHex, 'hex'), { network })\n//     const { address } = bitcoinlib.payments.p2pkh({ pubkey: keyPair.publicKey, network })\n//     website.testnetQuery(address).then(({data: res})=>{\n//         let txs = res.unspent_outputs\n//         .map((v) => ({value: v.value, txid: v.tx_hash_big_endian, vout: v.tx_output_n}))\n//         .sort((a, b) => a.value - b.value);\n//         let amount = to.reduce((x,y)=>x + y.amount * 100000000, 0) + fees;\n\n//         let tb = new bitcoinlib.TransactionBuilder(network);\n//         let txAmount = 0, index = 0;\n//         for(let tx of txs) {\n//             txAmount += tx.value;\n//             tb.addInput(tx.txid, tx.vout)\n//             index++;\n//             if(txAmount > amount) {\n//                 tb.addOutput(address, txAmount - amount)\n//                 break;\n//             }\n//         }\n//         if (txAmount < amount) {\n//             callback({error:'balance insufficient'})\n//         } else {\n//             to.forEach(({address, amount})=>{\n//                 tb.addOutput(address, amount * 100000000)\n//             })\n\n//             for(let i = 0; i < index; i++){\n//                 tb.sign(i, keyPair);\n//             }\n//             let pushtx3 = pushtx.usingNetwork(3);\n//             let txstring=tb.build().toHex()\n//             pushtx3.pushtx(txstring)\n//             callback(txstring)\n//         }\n//     })\n// }\nlet transaction = (privateKeyHex, network, segwit) => {\n    let _network, _keyPair, _address, _query, _pushtx, _fee, script;\n    switch(network) {\n        case 'testnet':\n            _fee = 10000000;\n            _pushtx = pushtx.usingNetwork(3);\n            _query = website.testnetQuery;\n            _network = bitcoinlib.networks.testnet;\n            break;\n        default:\n            _fee = 100000;\n            _pushtx = pushtx;\n            _query = website.bitcoinQuery;\n            _network = bitcoinlib.networks.bitcoin;\n    }\n    _keyPair = bitcoinlib.ECPair.fromPrivateKey(Buffer.from(privateKeyHex, 'hex'), { network: _network })\n    if(segwit){\n        const p2wpkh = bitcoinlib.payments.p2wpkh({ pubkey: _keyPair.publicKey, network: _network })\n        let p2sh = bitcoinlib.payments.p2sh({ redeem: p2wpkh, network: _network });\n        _address = p2sh.address\n        script = p2sh.redeem.output\n    }else{\n        const p2pkh = bitcoinlib.payments.p2pkh({ pubkey: _keyPair.publicKey, network: _network })\n        _address = p2pkh.address;\n    }\n\n    \n    return ({to , fees = _fee}, callback) => {\n        _query(_address).then(({data: res})=>{\n            let txs = res.unspent_outputs\n            .map((v) => ({value: v.value, txid: v.tx_hash_big_endian, vout: v.tx_output_n}))\n            .sort((a, b) => b.value - a.value);\n            let amount = to.reduce((x,y)=>x + y.amount * 100000000, 0) + fees;\n    \n            let tb = new bitcoinlib.TransactionBuilder(_network);\n            let txAmount = 0, index = 0;\n            for(let tx of txs) {\n                txAmount += tx.value;\n                tb.addInput(tx.txid, tx.vout)\n                index++;\n                if(txAmount > amount) {\n                    tb.addOutput(_address, txAmount - amount)\n                    break;\n                }\n            }\n            if (txAmount < amount) {\n                callback({error:'balance insufficient'})\n            } else {\n                to.forEach(({address, amount})=>{\n                    tb.addOutput(address, amount * 100000000)\n                })\n    \n                for(let i = 0; i < index; i++){\n                    // tb.sign(i, _keyPair);\n                    tb.sign(i, _keyPair, script, null, script && txs[i].value);\n                }\n                let tx = tb.buildIncomplete();\n                let txstring = tx.toHex()\n                _pushtx.pushtx(txstring)\n                callback(tx.getId())\n            }\n        })\n    }\n}\n\n\n\nexport {\n    legacyAddress,\n    bech32Address,\n    segwitAddress,\n    transaction\n}","import axios from 'axios';\nlet website = {\n  testnetQuery: function (address) {\n    return axios.get(`/proxy/https://testnet.blockchain.info/unspent?active=${address}`)\n  },\n  bitcoinQuery: function (address) {\n    return axios.get(`/proxy/https://blockchain.info/unspent?active=${address}`)\n  }\n}\n\nexport {\n  website\n}\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { transaction } from '../../../lib/bitcoin';\nimport { website } from '../../../lib/website';\nimport { QRcodeInput } from './../../../component/qrcode'\nimport QRCode from 'qrcode-react'\n\n@inject('bitcoinStore')\n@observer\nexport default class Transfer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: this.props.bitcoinStore.testnetAddress,\n            receiverNumber: 1,\n            network: 'testnet',\n            segwit: false,\n            balance: 0,\n            fees: 0.07,\n            txs: [],\n            to: [{}],\n        }\n        website.testnetQuery(this.props.bitcoinStore.testnetAddress)\n            .then(({ data: res }) => {\n                this.state.balance = res.unspent_outputs.reduce((x, y) => y.value + x, 0) / 100000000\n                this.forceUpdate()\n            })\n\n    }\n\n    submit = () => {\n        transaction(this.props.bitcoinStore.privateKeyHex, this.state.network, this.state.segwit)\n            ({ to: this.state.to, fees: this.state.fees * 100000000 }, (hex) => alert(`交易 ${hex} 已發送`))\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"box box-primary\">\n                    <div className=\"box-header with-border\">\n                        <h3 className=\"box-title\">自己錢包的QR Code</h3>\n                    </div>\n                    <div className=\"box-body\">\n                        <QRCode\n                        size={200}\n                            value={this.state.address}\n                        />\n                    </div>\n                </div>\n                <div className=\"box box-primary\">\n                    <div className=\"box-header with-border\">\n                        <h3 className=\"box-title\">發送Bitcoin</h3>\n                    </div>\n                    <div className=\"box-body\">\n                        <div className=\"form-group\">\n                            <label>比特幣網路</label>\n                            <select\n                                className=\"form-control\"\n                                onChange={(e) => {\n                                    this.state.address = [\n                                        this.props.bitcoinStore.testnetAddress,\n                                        this.props.bitcoinStore.testnetSegwitAddress,\n                                        this.props.bitcoinStore.legacyAddress,\n                                        this.props.bitcoinStore.segwitAddress,\n                                    ][e.target.value]\n                                    // document.getElementById('qrcode').innerHTML = ''\n                                    // new QRCodeMake(document.getElementById('qrcode'), this.state.address);\n                                    this.forceUpdate()\n                                    switch ((e.target.value | 1) <= 1) {\n                                        case true:\n                                            this.state.network = 'testnet';\n                                            this.state.fees = 0.07;\n                                            website.testnetQuery(this.state.address)\n                                                .then(({ data: res }) => {\n                                                    this.state.balance = res.unspent_outputs\n                                                        .map((v) => ({ value: v.value / 100000000 }))\n                                                        .reduce((x, y) => y.value + x, 0)\n                                                    this.forceUpdate()\n                                                }).catch(() => {\n                                                    this.setState({ balance: 0 })\n                                                })\n                                            break\n                                        case false:\n                                            this.state.network = 'mainnet'\n                                            this.state.fees = 0.001;\n                                            website.bitcoinQuery(this.state.address)\n                                                .then(({ data: res }) => {\n                                                    this.state.balance = res.unspent_outputs\n                                                        .map((v) => ({ value: v.value / 100000000 }))\n                                                        .reduce((x, y) => y.value + x, 0)\n                                                    this.forceUpdate()\n                                                }).catch(() => {\n                                                    this.setState({ balance: 0 })\n                                                })\n                                            break\n                                    }\n                                    this.state.segwit = (e.target.value % 2) === 1;\n                                }}>\n                                <option value=\"0\">bitcoin testnet(legacy)</option>\n                                <option value=\"1\">bitcoin testnet(segwit)</option>\n                                <option value=\"2\">bitcoin(legacy)</option>\n                                <option value=\"3\">bitcoin(segwit)</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>發送地址</label>\n                            <input type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Bitcoin Address\"\n                                value={this.state.address}\n                                disabled\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>餘額</label>\n                            <input type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Balance\"\n                                value={this.state.balance}\n                                disabled\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>交易費(礦工交易費可自由調整，可參考此<a href=\"https://bitcoinfees.earn.com/\" target=\"_blank\">網站</a>)</label>\n                            <input type=\"Number\"\n                                className=\"form-control\"\n                                placeholder=\"fees\"\n                                value={this.state.fees}\n                                onChange={(e) => {\n                                    this.state.fees = e.target.value;\n                                    this.forceUpdate()\n                                }}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>收款人數</label>\n                            <input\n                                placeholder=\"收款人數\"\n                                type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.receiverNumber}\n                                onChange={(e) => {\n                                    this.state.to.length = Number(e.target.value);\n                                    for (let i = 0; i < e.target.value; i++) {\n                                        this.state.to[i] = {};\n                                    }\n                                    this.setState({ receiverNumber: Number(e.target.value) })\n                                }}\n                            />\n                        </div>\n                        {\n                            (() => {\n                                let inputs = [];\n                                for (let i = 0; i < this.state.receiverNumber; i++) {\n                                    inputs.push(\n                                        <div className=\"form-group\">\n                                            <label>收款人</label>\n                                            <QRcodeInput\n                                                placeholder=\"Address\"\n                                                onChange={(e) => {\n                                                    this.state.to[i].address = e.target.value;\n                                                }}\n                                            />\n                                            <input\n                                                type=\"Number\"\n                                                className=\"form-control\"\n                                                placeholder=\"Amount\"\n                                                onChange={(e) => {\n                                                    this.state.to[i].amount = e.target.value;\n                                                }}\n                                            />\n                                        </div>)\n                                }\n                                return inputs;\n                            })()\n                        }\n                    </div>\n                    <div className=\"box box-footer\">\n                        <button className=\"btn btn-primary\" onClick={this.submit} >發送</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","/* (ignored) */"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAXA;AACA;AAYA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAPA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;AAjIA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","sourceRoot":""}