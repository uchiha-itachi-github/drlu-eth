{"version":3,"file":"static/js/27.chunk.js","sources":["/Users/linyitang/github/newWallet2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","/Users/linyitang/github/newWallet2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread.js","/Users/linyitang/github/newWallet2/src/contract/index.js","/Users/linyitang/github/newWallet2/src/page/dapp/voting/allProject.jsx"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import * as ethers from 'ethers/index.js';\nimport Config from './config.json'\nimport { reject } from 'q';\n\n\nfunction toHumanReadable(abi) {\n    if (!Array.isArray(abi)) { return }\n    abi = abi.filter(v => v.type !== 'fallback')\n    const hrabi = abi.map(v => {\n        const type = v.type\n        const name = v.name ? ' ' + v.name : ''\n        const inputs = v.inputs ? v.inputs.map(i => i.type + (i.indexed ? ' indexed' : '') + (i.name ? ' ' + i.name : '')).join() : ''\n        const stateMutability = v.stateMutability ? (v.stateMutability !== \"nonpayable\" ? ' ' + v.stateMutability : '') : ''\n        const returns = v.outputs ? (v.outputs.length >= 0 ? ` returns (${v.outputs.map((i) => i.type + (i.name ? ' ' + i.name : '') ).join()})` : '') : ''\n        return `${type}${name}(${inputs})${stateMutability}${returns}`;\n    })\n    return JSON.stringify(hrabi, null, 2);\n}\nfunction toAbi(hrabi) {\n    if (!Array.isArray(hrabi)) { return }\n    let abi = new ethers.utils.Interface(hrabi).abi.map(abi => {\n        abi = JSON.parse(JSON.stringify(abi));\n        delete abi.gas;\n        if (abi.stateMutability === null) {\n            delete abi.stateMutability\n        }\n        return abi\n    })\n    return JSON.stringify(abi, null, 2);\n}\n\nasync function deployErc20Token(name, symbol, decimals, wallet) {\n    let erc20 = new ethers.ContractFactory(Config.erc20.abi, Config.erc20.bytecode);\n    erc20 = erc20.connect(wallet);\n    let contract = await erc20.deploy(name, symbol, decimals);\n    return contract\n}\n\nasync function deployMutiWalletToken(_owners, _required, _daylimit, wallet) {\n    let mutiWallet = new ethers.ContractFactory(Config.mutiWallet.abi, Config.mutiWallet.bytecode);\n    mutiWallet = mutiWallet.connect(wallet);\n    let contract = await mutiWallet.deploy(name, symbol, decimals);\n    return contract\n}\n\n\nfunction Event(contract, eventName, args = [], fromBlock = 0, toBlock = 'latest') {\n    args = Array.isArray(args) ? args : [args];\n    let event = contract.filters[eventName](...args);\n    let abi = contract.interface.abi.find((v) => v.name === eventName).inputs;\n\n    let filter = {\n        fromBlock,\n        toBlock,\n        ...event\n    }\n\n\n    return this.getLogs(filter).then(function (result) {\n        let coder = new ethers.utils.AbiCoder()\n\n        let abi1 = abi.filter((v) => v.indexed)\n        let abi2 = abi.filter((v) => !v.indexed)\n\n        let r = result.map(r => {\n            r.topics.shift()\n            let topics = r.topics.map((t, i) => {\n                return coder.decode([abi1[i]], t)[0]\n            })\n            let datas = coder.decode(abi2, r.data)\n            let _r = abi.map(v => v.indexed ? topics.shift() : datas.shift())\n            _r.transactionHash = r.transactionHash\n            _r.blockNumber = Number(r.blockNumber)\n            return _r\n        })\n\n        return r\n    })\n\n    return Promise.resolve(1)\n}\n\n\nexport default {\n    toAbi,\n    toHumanReadable,\n    deployErc20Token,\n    deployMutiWalletToken,\n    Event\n}\n\nexport {\n    toAbi,\n    toHumanReadable,\n    deployErc20Token,\n    deployMutiWalletToken,\n    Event\n};\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react'\nimport { Link } from 'react-router-dom';\nimport Config from '../../../contract/config.json';\nimport * as ethers from 'ethers/index.js';\nimport { Event } from '../../../contract/index'\n\n@inject('ethereumStore')\n@observer\nexport default class AllProject extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            votings: [],\n            filterString: ''\n\n        };\n        this.provider = this.props.ethereumStore.provider;\n        this.contract = new ethers.Contract(Config.voting[3].contractAddress, Config.voting.abi, this.provider)\n    }\n    componentWillMount = () => {\n        this.getAllProject()\n    }\n    getAllProject = async () => {\n        let votings = await Event.bind(this.provider)(this.contract, 'NewVoting');\n        votings = votings.map(v => {\n            let [votingId, title, candidates] = v;\n            return {\n                votingId, title, candidates\n            }\n        })\n        this.setState({ votings })\n    }\n\n    render() {\n        let votings = this.state.votings;\n        if (this.state.filterString) {\n            votings = votings.filter((v) => {\n                console.log(v.title.indexOf(this.state.filterString))\n                console.log(v.votingId.indexOf(this.state.filterString))\n                console.log(v.candidates.find((v) => v.indexOf(this.state.filterString)))\n                if (v.title.indexOf(this.state.filterString) >= 0) return true;\n                if (v.votingId.indexOf(this.state.filterString) >= 0) return true;\n                if (v.candidates.find((v) => v.indexOf(this.state.filterString) >= 0)) return true;\n                return false\n            })\n            console.log(votings)\n        }\n        votings = votings.map(v => {\n            let candidates = v.candidates.map(v => <li key={v}>{v}</li>)\n            return (\n                <div className=\"col-xs-12 col-md-4 col-lg-3\" key={v.votingId}>\n                    <div className=\"box box-primary\">\n                        <div className=\"box-header\">\n                            {v.title}\n                        </div>\n                        <div className=\"box-body\">\n                            <label className=\"control-label\">選項</label>\n                            <ol>\n                                {candidates}\n                            </ol>\n                        </div>\n                        <div className=\"box-footer\">\n                            <Link\n                                className=\"btn btn-default\"\n                                to={\"/dapp/voting/project?votingId=\" + v.votingId}\n                                onClick={() => {\n                                    this.props.voting.setObject({\n                                        votingId: v.votingId, title: v.title, candidates: v.candidates\n                                    })\n                                }}\n                            >\n                                參與投票\n                            </Link>\n                            {/* <button className=\"btn btn-primary\" onClick={this.submit}>參與</button> */}\n                        </div>\n                    </div>\n                </div>\n            )\n        })\n\n        return [\n            <div className=\"col-xs-12\">\n                <div key=\"search\">\n                    <div className=\"input-group\">\n                        <input className=\"form-control\" placeholder=\"Search\" onChange={(e) => { this.setState({ filterString: e.target.value }) }} />\n                        <label className=\"input-group-addon\" >\n                            <i className=\"fa fa-search\"></i>\n                        </label>\n                    </div>\n                </div>\n            </div>,\n            votings\n        ]\n    }\n}\nexport { AllProject };"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAQA;;;;;;;;;;;;AAtFA;AAaA;AAaA;AAOA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAWA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AACA;AACA;AAFA;AAKA;AACA;AARA;AASA;AACA;;;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;;;;;;;;AArFA;AAAA;AAuFA;;;;;;;;;;;;AAvFA;;;;;;;;;A","sourceRoot":""}