{"version":3,"file":"static/js/13.chunk.js","sources":["/Users/linyitang/github/newWallet2/src/component/qrcode/index.jsx","/Users/linyitang/github/newWallet2/src/page/ethereum/general/otherBalance.jsx"],"sourcesContent":["import qrcode from './qrcode';\nimport QRcodeInput from './qrcodeInput';\n// import QRcodeView from './qrcodeView';\nexport default {\n    qrcode,\n    QRcodeInput,\n    // QRcodeView\n}\nexport {\n    qrcode,\n    QRcodeInput,\n    // QRcodeView\n}","import React, { Component } from 'react';\nimport { Subject } from 'rxjs'\nimport Bignumber from 'bignumber.js';\nimport { observer, inject } from 'mobx-react';\nimport axios from 'axios';\nimport { QRcodeInput } from '../../../component/qrcode'\n\n\n@inject('ethereumStore')\n@observer\nexport default class Balance extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            balance: []\n        };\n        this.subject = new Subject();\n    }\n    onSearch = (value) => {\n        if (/^0x[0-9a-f]{40}$/ig.test(value)) {\n            this.subject.next(value)\n        }\n    }\n\n    componentWillMount = () => {\n        this.subject.subscribe({\n            next: async (value) => {\n                try {\n                    let { data } = await axios.get(`/proxy/http://api.ethplorer.io/getAddressInfo/${value}?apiKey=freekey`)\n                    let tokens = []\n                    tokens.push({ symbol: 'ETH', balance: data.ETH.balance })\n                    if (data.tokens) {\n                        for (let token of data.tokens) {\n                            tokens.push({\n                                symbol: token.tokenInfo.symbol, balance: new Bignumber(token.balance).div(\n                                    new Bignumber(10).pow(token.tokenInfo.decimals)\n                                )\n                            })\n                        }\n                    }\n                    this.setState({ balance: tokens })\n                } catch (e) { }\n            }\n        })\n\n        // this.subscriber = interval(1000).pipe(\n        //     mergeMap(() =>\n        //         Observable.create((observer) => {\n        //             (this.state.address !== '0x0000000000000000000000000000000000000000' && this.state.address !== '') &&\n        //                 axios.get(`/proxy/http://api.ethplorer.io/getAddressInfo/${this.state.address}?apiKey=freekey`)\n        //                     .then(({ data }) => {\n        //                         observer.next(data);\n        //                     })\n        //         })\n        //         // Observable.create((observer) => {\n        //         //     this.props.ethereumState.web3.eth.getBalance(this.state.address, (e, r) => {\n        //         //         e && observer.error(e);\n        //         //         e || observer.next(r);\n        //         //     })\n        //         // })\n        //     )).subscribe((info) => {\n        //         let token = []\n        //         token.push({ symbol: 'ETH', balance: info.ETH.balance })\n        //         if (info.tokens) {\n        //             for (let _t of info.tokens) {\n        //                 token.push({\n        //                     symbol: _t.tokenInfo.symbol, balance: utils.toBigNumber(_t.balance).div(\n        //                         utils.toBigNumber(10).pow(_t.tokenInfo.decimals)\n        //                     )\n        //                 })\n        //             }\n        //         }\n        //         this.state['balance'] = token;\n        //         this.forceUpdate();\n        //     })\n    }\n    render() {\n        let inputs = this.state.balance.map((x) => {\n            return <input className=\"form-control\" disabled value={x.balance + ' ' + x.symbol} />\n        })\n        return (\n\n            <div className=\"box box-primary\">\n                <div className=\"box-header with-border\">\n                    <h3 className=\"box-title\">餘額查詢</h3>\n                </div>\n                <div className=\"box-body\">\n                    <div className=\"form-group\" >\n                        <label>錢包地址</label>\n                        {/* <input type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"0x ...\"\n                                onChange={(e) => { this.state.address = e.target.value }}\n                            /> */}\n                        <QRcodeInput placeholder=\"0x ...\" onChange={(e) => { this.onSearch(e.target.value) }} />\n                    </div>\n                    {inputs}\n                </div>\n            </div>\n        )\n    }\n}\nexport { Balance };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AACA;AACA;AAAA;AADA;AAKA;AACA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAcA;AAAA;AAAA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AADA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AA/DA;AACA;AADA;AAGA;AALA;AAMA;AACA;;;AA0DA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;;;;;;;;AA1FA;AAAA;AA4FA;;;;;;;;;;;;AA5FA;;;;;;;;;A","sourceRoot":""}