{"version":3,"file":"static/js/24.chunk.js","sources":["/Users/linyitang/github/newWallet2/src/contract/index.js","/Users/linyitang/github/newWallet2/src/page/dapp/game/1000guess.jsx"],"sourcesContent":["import * as ethers from 'ethers/index.js';\nimport Config from './config.json'\nimport { reject } from 'q';\n\n\nfunction toHumanReadable(abi) {\n    if (!Array.isArray(abi)) { return }\n    abi = abi.filter(v => v.type !== 'fallback')\n    const hrabi = abi.map(v => {\n        const type = v.type\n        const name = v.name ? ' ' + v.name : ''\n        const inputs = v.inputs ? v.inputs.map(i => i.type + (i.indexed ? ' indexed' : '') + (i.name ? ' ' + i.name : '')).join() : ''\n        const stateMutability = v.stateMutability ? (v.stateMutability !== \"nonpayable\" ? ' ' + v.stateMutability : '') : ''\n        const returns = v.outputs ? (v.outputs.length >= 0 ? ` returns (${v.outputs.map((i) => i.type + (i.name ? ' ' + i.name : '') ).join()})` : '') : ''\n        return `${type}${name}(${inputs})${stateMutability}${returns}`;\n    })\n    return JSON.stringify(hrabi, null, 2);\n}\nfunction toAbi(hrabi) {\n    if (!Array.isArray(hrabi)) { return }\n    let abi = new ethers.utils.Interface(hrabi).abi.map(abi => {\n        abi = JSON.parse(JSON.stringify(abi));\n        delete abi.gas;\n        if (abi.stateMutability === null) {\n            delete abi.stateMutability\n        }\n        return abi\n    })\n    return JSON.stringify(abi, null, 2);\n}\n\nasync function deployErc20Token(name, symbol, decimals, wallet) {\n    let erc20 = new ethers.ContractFactory(Config.erc20.abi, Config.erc20.bytecode);\n    erc20 = erc20.connect(wallet);\n    let contract = await erc20.deploy(name, symbol, decimals);\n    return contract\n}\n\nasync function deployMutiWalletToken(_owners, _required, _daylimit, wallet) {\n    let mutiWallet = new ethers.ContractFactory(Config.mutiWallet.abi, Config.mutiWallet.bytecode);\n    mutiWallet = mutiWallet.connect(wallet);\n    let contract = await mutiWallet.deploy(name, symbol, decimals);\n    return contract\n}\n\n\nfunction Event(contract, eventName, args = [], fromBlock = 0, toBlock = 'latest') {\n    args = Array.isArray(args) ? args : [args];\n    let event = contract.filters[eventName](...args);\n    let abi = contract.interface.abi.find((v) => v.name === eventName).inputs;\n\n    let filter = {\n        fromBlock,\n        toBlock,\n        ...event\n    }\n\n\n    return this.getLogs(filter).then(function (result) {\n        let coder = new ethers.utils.AbiCoder()\n\n        let abi1 = abi.filter((v) => v.indexed)\n        let abi2 = abi.filter((v) => !v.indexed)\n\n        let r = result.map(r => {\n            r.topics.shift()\n            let topics = r.topics.map((t, i) => {\n                return coder.decode([abi1[i]], t)[0]\n            })\n            let datas = coder.decode(abi2, r.data)\n            let _r = abi.map(v => v.indexed ? topics.shift() : datas.shift())\n            _r.transactionHash = r.transactionHash\n            _r.blockNumber = Number(r.blockNumber)\n            return _r\n        })\n\n        return r\n    })\n\n    return Promise.resolve(1)\n}\n\n\nexport default {\n    toAbi,\n    toHumanReadable,\n    deployErc20Token,\n    deployMutiWalletToken,\n    Event\n}\n\nexport {\n    toAbi,\n    toHumanReadable,\n    deployErc20Token,\n    deployMutiWalletToken,\n    Event\n};\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport * as ethers from 'ethers/index.js';\nimport Config from '../../../contract/config.json';\nimport { Event } from '../../../contract/index';\nimport dayjs from 'dayjs';\n\n@inject('ethereumStore')\n@observer\nexport default class Guess extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            openHistory: false,\n            history: [],\n            getBettingPrice: '',\n            getBettingStatus: []\n        }\n        this.provider = this.props.ethereumStore.provider;\n        this.contract = new ethers.Contract(Config[\"1000Guess\"][3].contractAddress, Config[\"1000Guess\"].abi, this.provider)\n    }\n    componentWillMount = () => {\n        this.getInfo()\n        this.interval = setInterval(() => {\n            this.getInfo();\n            this.state.openHistory && this.getHistory()\n        }, 4000)\n    }\n    componentWillUnmount = () => {\n        clearInterval(this.interval)\n    }\n\n    getInfo = async () => {\n        let getBettingStatus = this.contract.getBettingStatus();\n        let getBalance = await this.contract.getBalance();\n        let getDeveloperAddress = await this.contract.getDeveloperAddress();\n        let getMaxContenders = this.contract.getMaxContenders();\n        let getBettingPrice = this.contract.getBettingPrice();\n        let getDeveloperFee = this.contract.getDeveloperFee();\n        let getLotteryMoney = this.contract.getLotteryMoney();\n        let state = this.contract.state();\n\n        [getBettingStatus, getBalance, getDeveloperAddress, getMaxContenders, getBettingPrice, getDeveloperFee, getLotteryMoney, state] = JSON.parse(JSON.stringify(await Promise.all([getBettingStatus, getBalance, getDeveloperAddress, getMaxContenders, getBettingPrice, getDeveloperFee, getLotteryMoney, state])))\n        getBalance = ethers.utils.formatEther(getBalance)\n        getDeveloperFee = ethers.utils.formatEther(getDeveloperFee)\n        getBettingPrice = ethers.utils.formatEther(getBettingPrice)\n        getLotteryMoney = ethers.utils.formatEther(getLotteryMoney)\n        for (let i = 2; i <= 4; i++) {\n            getBettingStatus[i] = ethers.utils.formatEther(getBettingStatus[i])\n        }\n\n        this.setState({\n            getBettingStatus, getBalance, getDeveloperAddress, getMaxContenders, getMaxContenders,\n            getBettingPrice, getDeveloperFee, getLotteryMoney, state\n        })\n    }\n\n    addguessBtn = async () => {\n        let signer = this.contract.connect(this.props.ethereumStore.wallet.connect(this.provider));\n        let tx = await signer.addguess(this.guess, { value: ethers.utils.parseEther(this.state.getBettingPrice) });\n        alert('txid: ' + tx.hash);\n        await tx.wait();\n        this.getInfo();\n    }\n\n    finishBtn = async () => {\n        let signer = this.contract.connect(this.props.ethereumStore.wallet.connect(this.provider));\n        let tx = await signer.finish();\n        alert('txid: ' + tx.hash);\n        await tx.wait();\n        this.getInfo();\n    }\n\n    setBettingConditionBtn = async () => {\n        let signer = this.contract.connect(this.props.ethereumStore.wallet.connect(this.provider));\n        let tx = await signer.setBettingCondition(this.contenders, ethers.utils.parseEther(this.bettingprice));\n        alert('txid: ' + tx.hash);\n        await tx.wait();\n        this.getInfo();\n    }\n\n    getHistory = async () => {\n        let SentPrizeToWinner = Event.bind(this.provider)(this.contract, 'SentPrizeToWinner')\n        let SentDeveloperFee = Event.bind(this.provider)(this.contract, 'SentDeveloperFee')\n        SentPrizeToWinner = await SentPrizeToWinner;\n        SentDeveloperFee = await SentDeveloperFee;\n        SentPrizeToWinner = SentPrizeToWinner.map(v => {\n            let [winner, money, guess, gameindex, lotterynumber, timestamp] = v\n            return { winner, money: ethers.utils.formatEther(money), guess, gameindex, lotterynumber, timestamp: dayjs(timestamp * 1000).format('YYYY年MM月DD日 HH:mm:ss'), transactionHash: v.transactionHash };\n        })\n        SentDeveloperFee = SentDeveloperFee.map(v => {\n            let [amount, balance] = v\n\n            return { amount: ethers.utils.formatEther(amount), balance: ethers.utils.formatEther(balance), transactionHash: v.transactionHash };\n        })\n        let rows = SentDeveloperFee.map(v => {\n            let winners = SentPrizeToWinner.filter(x => {\n                return x.transactionHash == v.transactionHash\n            })\n            return {\n                ...v,\n                winners\n            }\n        })\n\n        rows = rows.reverse()\n        this.setState({ history: JSON.parse(JSON.stringify(rows)) });\n    }\n\n    getHistoryReact() {\n        let rows = this.state.history.map((v, i) => {\n            let winners = v.winners.map((winner, i) => {\n                return [\n                    <td key={winner.guess}>{winner.guess}</td>,\n                    <td key={winner.lotterynumber}>{winner.lotterynumber}</td>,\n                    <td key={winner.money}>{winner.money}</td>,\n                    <td key={winner.timestamp}>{winner.timestamp}</td>,\n                    <td key={winner.winner}>{winner.winner}</td>\n                ]\n            })\n            let winner = winners.shift()\n            winners = winners.map(winner => <tr key={winner.winner}>{winner}</tr>);\n            return (\n                [<tr key={i}>\n                    <td rowSpan={v.winners.length || 1}>{i + 1}</td>\n                    <td rowSpan={v.winners.length || 1}>{v.amount}</td>\n                    <td rowSpan={v.winners.length || 1}>{v.balance}</td>\n                    {v.winners.length ? winner :\n                        <td colSpan={v.winners.length ? 1 : 5} ></td>\n                    }\n                </tr>, winners]\n            )\n        })\n        return (\n            <table className=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>莊家手續費(ether)</th>\n                        <th>餘額(ether)</th>\n                        <th>猜測值</th>\n                        <th>開獎號碼</th>\n                        <th>贏家所獲得彩金(ether)</th>\n                        <th>開牌日期</th>\n                        <th>贏家</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </table>\n        )\n    }\n\n    render() {\n\n        let getBettingStatus = (\n            <table>\n                <tbody>\n                    <tr><th>合約狀態</th><td>{this.state.getBettingStatus[0]}</td></tr>\n                    <tr><th>累積猜測次數</th><td>{this.state.getBettingStatus[1]}</td></tr>\n                    <tr><th>累積樂透淨額</th><td>{this.state.getBettingStatus[2]}</td></tr>\n                    <tr><th>合約餘額</th><td>{this.state.getBettingStatus[3]}</td></tr>\n                    <tr><th>每注金額</th><td>{this.state.getBettingStatus[4]}</td></tr>\n                </tbody>\n            </table>\n        )\n\n\n\n        return (\n            <div className=\"col-xs-12\">\n                <table className=\"table table-striped\">\n                    <tbody>\n                        <tr>\n                            <td>狀態</td>\n                            <td>{this.state.state}</td>\n                            <td>合約餘額</td>\n                            <td>{this.state.getBalance}</td>\n                        </tr>\n                        <tr>\n                            <td>最大競爭人數</td>\n                            <td>{this.state.getMaxContenders}</td>\n                            <td>累積樂透淨額</td>\n                            <td>{this.state.getLotteryMoney}</td>\n                        </tr>\n                        <tr>\n                            <td>莊家抽頭</td>\n                            <td>{this.state.getDeveloperFee}</td>\n                            <td>投注金額</td>\n                            <td>{this.state.getBettingPrice}</td>\n                        </tr>\n                        <tr>\n                            <td>開發者地址</td>\n                            <td>{this.state.getDeveloperAddress}</td>\n                            <td>投注狀態</td>\n                            <td>{getBettingStatus}</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div className=\"box box-primary\">\n                    <div className=\"box-header with-border\">\n                        <h3 className=\"box-title\">下注</h3>\n                    </div>\n                    <div className=\"box-body\">\n                        <label className=\"control-label\">下注賭金(只能依右上角之投注金額下注)</label>\n                        <input className=\"form-control\" type=\"number\" value={this.state.getBettingPrice} onChange={() => { }} />\n                        <label className=\"control-label\">輸入猜測值</label>\n                        <input className=\"form-control\" type=\"number\" onChange={(e) => { this.guess = e.target.value }} />\n                    </div>\n                    <div className=\"box-footer\">\n                        {this.props.ethereumStore.address ? <button type=\"button\" className=\"btn btn-primary\" onClick={this.addguessBtn}>送出</button> : <button className=\"btn btn-primary\" disabled>右上角請先進行登入</button>}\n                    </div>\n                </div>\n                {this.props.ethereumStore.address === this.state.getDeveloperAddress &&\n                    [<div key=\"1\" className=\"box box-primary\">\n                        <div className=\"box-header with-border\">\n                            <h3 className=\"box-title\">開牌與派彩</h3>\n                        </div>\n                        <div className=\"box-body\">\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.finishBtn}>送出</button>\n                        </div>\n                        <div className=\"box-footer\">\n\n                        </div>\n                    </div>,\n\n                    <div key=\"2\" className=\"box box-primary\">\n                        <div className=\"box-header with-border\">\n                            <h3 className=\"box-title\">設置</h3>\n                        </div>\n                        <div className=\"box-body\">\n                            <div className=\"form-group\">\n                                <div>\n                                    <label className=\"control-label\">設定競爭條件 競爭人數</label>\n                                    <input className=\"form-control\" type=\"number\" onChange={(e) => this.contenders = e.target.value} />\n                                    <label className=\"control-label\">投注價格(eth)</label>\n                                    <input className=\"form-control\" type=\"number\" onChange={(e) => this.bettingprice = e.target.value} />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"box-footer\">\n                            <button className=\"btn btn-primary\" onClick={this.setBettingConditionBtn}>設定</button>\n                        </div>\n                    </div>]\n\n                }\n                {/*<divr\" style={{ display: \"none\" }}>\n                    <div>下注賭金<inputr\" />(請依右上角之投注金額下注)</div>\n                    <div>輸入猜測值\n                        <inpute\" />\n                        <button\">下注</button>交易編號:<span\">\n                        </span>\n                    </div>\n                </div>\n                <divr\" style={{ display: \"none\" }}>\n                    <div>輸入一個目標值找最接近的贏家\n                        <inpute\" />\n                        <button\">尋找</button>\n                        回傳:\n                        <span</span>\n                    </div>\n                    <br />\n                    <div>設定競爭條件 競爭人數:\n                        <inputs\" /> 投注價格(eth):\n                        <inpute\" />\n                        <button\">設定</button>\n                        交易編號:\n                        <span</span>\n                    </div>\n                    <br />\n                    <div>開牌與派彩\n                        <button\">點擊</button>\n                        回傳:\n                        <span</span>\n                    </div>\n                    <br />\n                </div> */}\n                <div key=\"1\" className=\"box box-primary\">\n                    <div className=\"box-header with-border\">\n                        <h3 className=\"box-title\">歷史紀錄</h3>\n                    </div>\n                    <div className=\"box-body\">\n                        <button className=\"btn btn-primary\" onClick={() => {\n                            this.state.openHistory || this.setState({ openHistory: true })\n                        }}>查詢歷史賭局結果</button>\n                        {this.getHistoryReact()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n\n\n}\nexport { Guess };"],"mappings":"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","sourceRoot":""}