{"version":3,"file":"static/js/9.chunk.js","sources":["/Users/linyitang/github/newWallet2/src/component/qrcode/index.jsx","/Users/linyitang/github/newWallet2/src/page/bitcoin/general/otherBalance.jsx"],"sourcesContent":["import qrcode from './qrcode';\nimport QRcodeInput from './qrcodeInput';\n// import QRcodeView from './qrcodeView';\nexport default {\n    qrcode,\n    QRcodeInput,\n    // QRcodeView\n}\nexport {\n    qrcode,\n    QRcodeInput,\n    // QRcodeView\n}","import React, { Component } from 'react';\n\n\nimport { interval, Observable } from 'rxjs'\nimport { mergeMap } from 'rxjs/operators'\nimport { observer, inject } from 'mobx-react';\nimport { QRcodeInput } from './../../../component/qrcode'\n\n@inject('bitcoinStore')\n@observer\nexport default class OtherBalance extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            legacyAddress: '',\n            segwitAddress: '',\n            testnetAddress: '',\n            testnetSegwitAddress: '',\n            litecoinAddress: ''\n        }\n    }\n\n    componentWillMount = () => {\n        this.subscriber1 = interval(1000).pipe(\n            mergeMap(() =>\n                Observable.create((observer) => {\n                    window.$.ajax(`https://blockchain.info/q/addressbalance/${this.state.legacyAddress}`, {\n                        success: (balance) => {\n                            observer.next(balance);\n                        }\n                    })\n                })\n            )).subscribe((btc) => {\n                this.state.lbalance = (btc / 100000000)\n                this.forceUpdate();\n            })\n        this.subscriber2 = interval(1000).pipe(\n            mergeMap(() =>\n                Observable.create((observer) => {\n                    window.$.ajax(`https://blockchain.info/q/addressbalance/${this.state.segwitAddress}`, {\n                        success: (balance) => {\n                            observer.next(balance);\n                        }\n                    })\n                })\n            )).subscribe((btc) => {\n                this.state.sbalance = (btc / 100000000)\n                this.forceUpdate();\n            })\n            this.subscriber3 = interval(1000).pipe(\n                mergeMap(() =>\n                    Observable.create((observer) => {\n                        window.$.ajax(`https://testnet.blockchain.info/q/addressbalance/${this.state.testnetAddress}`, {\n                            success: (balance) => {\n                                observer.next(balance);\n                            }\n                        })\n                    })\n                )).subscribe((btc) => {\n                    this.state.tbalance = (btc / 100000000)\n                    this.forceUpdate();\n                })\n            this.subscriber4 = interval(1000).pipe(\n                mergeMap(() =>\n                    Observable.create((observer) => {\n                        window.$.ajax(`https://testnet.blockchain.info/q/addressbalance/${this.state.testnetSegwitAddress}`, {\n                            success: (balance) => {\n                                observer.next(balance);\n                            }\n                        })\n                    })\n                )).subscribe((btc) => {\n                    this.state.tsbalance = (btc / 100000000)\n                    this.forceUpdate();\n                })\n            this.subscriber5 = interval(5000).pipe(\n                mergeMap(() =>\n                    Observable.create((observer) => {\n                        window.$.ajax(`https://chain.so/api/v2/get_address_balance/ltc/${this.state.litecoinAddress}/24`, {\n                            success: ({ data: { confirmed_balance: balance } }) => {\n                                observer.next(balance / 1);\n                            }\n                        })\n                    })\n                )).subscribe((ltc) => {\n                    this.state.liteBalance = ltc\n                    this.forceUpdate();\n                })\n    }\n\n    componentWillUnmount() {\n        this.subscriber1.unsubscribe();\n        this.subscriber2.unsubscribe();\n        this.subscriber3.unsubscribe();\n        this.subscriber4.unsubscribe();\n        this.subscriber5.unsubscribe();\n    }\n\n    render() {\n        return (\n            // <form>\n                <div className=\"box box-primary\">\n                    <div className=\"box-header with-border\">\n                        <h3 className=\"box-title\">餘額查詢</h3>\n                    </div>\n                    <div className=\"box-body\">\n                        <div className=\"form-group\" >\n                            <label>Bitcoin地址(legacy格式)</label>\n                            {/* <input type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Bitcoin Address\"\n                                onChange={(e) => { this.state.legacyAddress = e.target.value }}\n                            /> */}\n                            <QRcodeInput placeholder=\"Bitcoin Address\" onChange={(e) => { this.state.legacyAddress = e.target.value }} />\n                        </div>\n                        <input className=\"form-control\" value={this.state.sbalance || 0} disabled/>\n                    </div>\n                    <div className=\"box-body\">\n                        <div className=\"form-group\" >\n                            <label>Bitcoin地址(segwit格式)</label>\n                            {/* <input type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Bitcoin Address\"\n                                onChange={(e) => { this.state.segwitAddress = e.target.value }}\n                            /> */}\n                            <QRcodeInput placeholder=\"Bitcoin Address\" onChange={(e) => { this.state.segwitAddress = e.target.value }} />\n                        </div>\n                        <input className=\"form-control\" value={this.state.sbalance || 0} disabled/>\n                    </div>\n                    <div className=\"box-body\">\n                        <div className=\"form-group\" >\n                            <label>Bitcoin Testnet地址(legacy格式)</label>\n                            {/* <input type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Bitcoin Address\"\n                                onChange={(e) => { this.state.testnetAddress = e.target.value }}\n                            /> */}\n                            <QRcodeInput placeholder=\"Bitcoin Address\" onChange={(e) => { this.state.testnetAddress = e.target.value }} />\n                        </div>\n                        <input className=\"form-control\" value={this.state.tbalance || 0} disabled/>\n                    </div>\n                    <div className=\"box-body\">\n                        <div className=\"form-group\" >\n                            <label>Bitcoin Testnet(segwit)地址</label>\n                            {/* <input type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Bitcoin Address\"\n                                onChange={(e) => { this.state.testnetSegwitAddress = e.target.value }}\n                            /> */}\n                            <QRcodeInput placeholder=\"Bitcoin Address\" onChange={(e) => { this.state.testnetSegwitAddress = e.target.value }} />\n                        </div>\n                        <input className=\"form-control\" value={this.state.tsbalance || 0} disabled/>\n                    </div>\n                    <div className=\"box-body\">\n                        <div className=\"form-group\" >\n                            <label>Litecoin地址</label>\n                            {/* <input type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"LiteCoin Address\"\n                                onChange={(e) => { this.state.litecoinAddress = e.target.value }}\n                            /> */}\n                            <QRcodeInput placeholder=\"Bitcoin Address\" onChange={(e) => { this.state.litecoinAddress = e.target.value }} />\n                        </div>\n                        <input className=\"form-control\" value={this.state.liteBalance || 0} disabled/>\n                    </div>\n                </div>\n            // </form>\n        )\n    }\n}\n\nexport { OtherBalance };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAGA;AACA;AACA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAaA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AACA;AAAA;AACA;AACA;AACA;AA5EA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAUA;AACA;;;AAqEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjEA;AAqEA;;;;;;;;;;;AA/JA;AAAA;AAkKA;;;;;;;;;;;;AAlKA;;;;;;;;;A","sourceRoot":""}